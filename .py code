# Data Analysis

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Data Visualization

import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go

# World map representation
import country_converter as coco
import datetime
import calendar
df=pd.read_csv('World Energy Overview.csv')
pf=pd.read_csv('Production_Total.csv')
cf=pd.read_csv('Consumption_Total.csv')
df.head()
df.tail()
df.shape
pf.shape
cf.shape
df.columns
df.isnull().sum()
pf.isnull()
cf.isnull().sum()
cf.fillna(0, inplace=True)
# Calculating the correlation matrix
corr_matrix = df.corr()
print(corr_matrix)
# Setting the date column as the index
df.set_index('Date', inplace=True)

# Ploting the data
df[df.columns].plot(figsize=(12,8))

plt.xlabel('Year')
plt.ylabel('Energy (million tons of oil equivalent)')

fig = px.line(df, x=df.index, y=df.columns, title='Time Series Data for Energy Production and Consumption')
fig.update_xaxes(rangeslider_visible=True)


# displays the plot
fig.show()
continent_pf =  pf.groupby(by='Continent')['Total_production'].sum()
print(continent_pf)

fig = px.pie(pf, values='Total_production', names='Continent',color='Continent',
             title='Continent-wise total energy production of the World',
             width=850, height=600)
fig.show()
import country_converter as coco
country = coco.convert(names = cf['Country'], to = "ISO3")
cf['Country'] = country

fig = px.choropleth(locations = cf.Country,
                    color = cf.Total_Consumption,
                    color_continuous_scale = [[0, 'rgb(166,206,227, 0.5)'],
                      [0.005, 'rgb(31,120,180,0.5)'],
                      [0.09, 'rgb(178,223,138,0.5)'],
                      [0.2, 'rgb(51,160,44,0.5)'],
                      [0.7, 'rgb(251,154,153,0.5)'],
                      [0.9, 'rgb(227,26,28,0.5)'],
                      [1, 'rgb(227,26,28,0.5)']
                     ],
                    title = 'Global Energy Consumption')
fig.update_layout(height=630, width=850)
fig.show()


top_consumption = cf[['Country', 'Total_Consumption']].sort_values(by=['Total_Consumption'], ascending=False).head(10)

fig = px.bar(top_consumption, x='Country', y='Total_Consumption',labels={
                     "Country": "Countries",
                     "Total_production": "Total Production"
                 },title='Top 10 Countries with the Highest Energy Consumption:', width=850, height=600)
fig.show()
continent_consumption =  cf.groupby(by='Continent')['Total_Consumption'].sum()
print(continent_consumption)

fig = px.pie(cf, values='Total_Consumption', names='Continent',color='Continent',
             title='Continent-wise total energy consumption of the World',
             width=850, height=600)
fig.show()
country = coco.convert(names = cf['Country'], to = "ISO3")
cf['Country'] = country

fig = px.choropleth(locations = cf.Country,
                    color = cf.Total_Consumption,
                    color_continuous_scale = [[0, 'rgb(166,206,227, 0.5)'],
                      [0.005, 'rgb(31,120,180,0.5)'],
                      [0.09, 'rgb(178,223,138,0.5)'],
                      [0.2, 'rgb(51,160,44,0.5)'],
                      [0.7, 'rgb(251,154,153,0.5)'],
                      [0.9, 'rgb(227,26,28,0.5)'],
                      [1, 'rgb(227,26,28,0.5)']
                     ],
                    title = 'Global Energy Consumption')
fig.update_layout(height=630, width=850)
fig.show()
# Calculating total production and consumption for each energy source
total_pf = df.iloc[:, 1:5].sum()
total_cf = df.iloc[:, 9:13].sum()

# Creating a bar chart of the total production and consumption for each energy source
fig, ax = plt.subplots(figsize=(10, 7))
ax.bar(total_pf.index, total_pf.values, label='Production')
ax.bar(total_cf.index, total_cf.values, label='Consumption')
plt.xticks(rotation=90, fontsize=10)
plt.yticks(fontsize=10)
plt.title('Total Energy Production and Consumption by Source', fontsize=12)
plt.xlabel('Energy Source', fontsize=10)
plt.ylabel('Energy (quadrillion BTU)', fontsize=10)
plt.legend(fontsize=10)
plt.show()

# Plotting the Total Fossil Fuels Production vs. Consumption
plt.figure(figsize=(12,6))
plt.plot(df['Total Fossil Fuels Production'], label='Production')
plt.plot(df['Total Fossil Fuels Consumption'], label='Consumption')
plt.title('Total Fossil Fuels Production vs. Consumption')
plt.xlabel('Year')
plt.xticks(df.index[::10], rotation=90, ha='right', fontsize=9)
plt.ylabel('Production/Consumption (million tons of oil equivalent)')
plt.legend()
plt.show()
datax1 = df.filter(['Total Primary Energy Production','Total Primary Energy Consumption', 'Date'], axis=1)
datax2 = datax1.rename(columns={'Total Primary Energy Production':'Total_Production', 
                                                     'Total Primary Energy Consumption':'Total_Consumption'})
datax2 = datax2.set_index('Date')
datax2.head()

fig = px.line(datax2, x=datax2.index, y=datax2.columns,
              title='Energy Production vs Consumption',width=850, height=500)
fig.update_xaxes(rangeslider_visible=True)
fig.show()

fig = make_subplots(rows=1, cols=2, specs=[[{"type": "pie"}, {"type": "pie"}]])

fig.add_trace(go.Pie(
    values= [3015.745538, 355.6315180000005, 311.220662],
    labels=['Total Fossil Fuels Production', 'Total Renewable Energy Production', 'Nuclear Electric Power Production'],
    domain=dict(x=[0, 0.5]),
    title='Production'),
    row=1, col=1)
              
fig.add_trace(go.Pie(
    values= [3786.513071, 354.38061200000004, 311.220662],
    labels=['Total Fossil Fuels Consumption', 'Total Renewable Energy Consumption', 'Nuclear Electric Power Consumption'],
    domain=dict(x=[0, 0.5]),
    title='Consumption'),
    row=1, col=2)

fig.update_layout(height=500, width=850)
fig.show()


labels = ['Total Production','Total Consumption']
values = [3682.597704, 4457.458121]

fig = go.Figure(data=[go.Pie(labels=labels, values=values)])
fig.update_layout(width=850, height=500)
fig.show()
